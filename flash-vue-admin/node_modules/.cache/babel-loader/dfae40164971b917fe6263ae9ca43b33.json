{"remainingRequest":"D:\\github\\ziyuanwendang\\flash-vue-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\github\\ziyuanwendang\\flash-vue-admin\\src\\views\\system\\cfg\\cfg.js?vue&type=script&lang=js&","dependencies":[{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\src\\views\\system\\cfg\\cfg.js","mtime":1649735864000},{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\babel.config.js","mtime":1649735864000},{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/github/ziyuanwendang/flash-vue-admin/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _cfg = _interopRequireDefault(require(\"@/api/system/cfg\"));\n\nvar _utils = require(\"@/utils/utils\");\n\nvar _index = _interopRequireDefault(require(\"@/directive/permission/index.js\"));\n\nvar _default = {\n  name: 'cfg',\n  directives: {\n    permission: _index.default\n  },\n  data: function data() {\n    return {\n      formVisible: false,\n      formTitle: this.$t('config.add'),\n      isAdd: true,\n      form: {\n        id: '',\n        cfgName: '',\n        cfgValue: '',\n        cfgDesc: ''\n      },\n      listQuery: {\n        page: 1,\n        limit: 20,\n        cfgName: undefined,\n        cfgValue: undefined\n      },\n      dialog: {\n        show: false,\n        title: '',\n        content: ''\n      },\n      total: 0,\n      list: null,\n      listLoading: true,\n      selRow: {}\n    };\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        published: 'success',\n        draft: 'gray',\n        deleted: 'danger'\n      };\n      return statusMap[status];\n    }\n  },\n  computed: {\n    rules: function rules() {\n      return {\n        cfgName: [{\n          required: true,\n          message: this.$t('config.name') + this.$t('common.isRequired'),\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 2000,\n          message: this.$t('config.name') + this.$t('config.lengthValidation'),\n          trigger: 'blur'\n        }],\n        cfgValue: [{\n          required: true,\n          message: this.$t('config.value') + this.$t('common.isRequired'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 2000,\n          message: this.$t('config.value') + this.$t('config.lengthValidation'),\n          trigger: 'blur'\n        }]\n      };\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      this.fetchData();\n    },\n    fetchData: function fetchData() {\n      var _this = this;\n\n      this.listLoading = true;\n\n      _cfg.default.getList(this.listQuery).then(function (response) {\n        _this.list = response.data.records;\n        _this.listLoading = false;\n        _this.total = response.data.total;\n      });\n    },\n    search: function search() {\n      this.listQuery.page = 1;\n      this.fetchData();\n    },\n    reset: function reset() {\n      this.listQuery.cfgName = '';\n      this.listQuery.cfgValue = '';\n      this.listQuery.page = 1;\n      this.fetchData();\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getList();\n    },\n    handleClose: function handleClose() {},\n    fetchNext: function fetchNext() {\n      this.listQuery.page = this.listQuery.page + 1;\n      this.fetchData();\n    },\n    fetchPrev: function fetchPrev() {\n      this.listQuery.page = this.listQuery.page - 1;\n      this.fetchData();\n    },\n    fetchPage: function fetchPage(page) {\n      this.listQuery.page = page;\n      this.fetchData();\n    },\n    changeSize: function changeSize(limit) {\n      this.listQuery.limit = limit;\n      this.fetchData();\n    },\n    handleCurrentChange: function handleCurrentChange(currentRow, oldCurrentRow) {\n      this.selRow = currentRow;\n    },\n    resetForm: function resetForm() {\n      this.form = {\n        id: '',\n        cfgName: '',\n        cfgValue: '',\n        cfgDesc: ''\n      };\n    },\n    add: function add() {\n      this.resetForm();\n      this.formTitle = this.$t('config.add');\n      this.formVisible = true;\n      this.isAdd = true;\n    },\n    save: function save() {\n      var _this2 = this;\n\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          var formData = {\n            id: _this2.form.id,\n            cfgName: _this2.form.cfgName,\n            cfgValue: _this2.form.cfgValue,\n            cfgDesc: _this2.form.cfgDesc\n          };\n\n          if (_this2.form.id) {\n            _cfg.default.update(formData).then(function (response) {\n              _this2.$message({\n                message: _this2.$t('common.optionSuccess'),\n                type: 'success'\n              });\n\n              _this2.fetchData();\n\n              _this2.formVisible = false;\n            });\n          } else {\n            _cfg.default.add(formData).then(function (response) {\n              _this2.$message({\n                message: _this2.$t('common.optionSuccess'),\n                type: 'success'\n              });\n\n              _this2.fetchData();\n\n              _this2.formVisible = false;\n            });\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    checkSel: function checkSel() {\n      if (this.selRow && this.selRow.id) {\n        return true;\n      }\n\n      this.$message({\n        message: this.$t('common.mustSelectOne'),\n        type: 'warning'\n      });\n      return false;\n    },\n    editItem: function editItem(record) {\n      this.selRow = Object.assign({}, record);\n      this.edit();\n    },\n    edit: function edit() {\n      if (this.checkSel()) {\n        this.isAdd = false;\n        this.form = this.selRow;\n        this.formTitle = this.$t('config.edit');\n        this.formVisible = true;\n      }\n    },\n    removeItem: function removeItem(record) {\n      this.selRow = record;\n      this.remove();\n    },\n    remove: function remove() {\n      var _this3 = this;\n\n      if (this.checkSel()) {\n        var id = this.selRow.id;\n        this.$confirm(this.$t('common.deleteConfirm'), this.$t('common.tooltip'), {\n          confirmButtonText: this.$t('button.submit'),\n          cancelButtonText: this.$t('button.cancel'),\n          type: 'warning'\n        }).then(function () {\n          _cfg.default.remove(id).then(function (response) {\n            _this3.$message({\n              message: _this3.$t('common.optionSuccess'),\n              type: 'success'\n            });\n\n            _this3.fetchData();\n          });\n        }).catch(function () {});\n      }\n    },\n    exportXls: function exportXls() {\n      _cfg.default.exportXls(this.listQuery).then(function (response) {\n        window.location.href = (0, _utils.getApiUrl)() + '/file/download?idFile=' + response.data.id;\n      });\n    },\n    showCfgValDialog: function showCfgValDialog(data) {\n      this.dialog.content = data.cfgValue;\n      this.dialog.title = data.cfgName;\n      this.dialog.show = true;\n    }\n  }\n};\nexports.default = _default;",null]}