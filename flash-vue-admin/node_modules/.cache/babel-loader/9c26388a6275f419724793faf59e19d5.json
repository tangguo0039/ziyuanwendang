{"remainingRequest":"D:\\github\\ziyuanwendang\\flash-vue-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\github\\ziyuanwendang\\flash-vue-admin\\src\\views\\cms\\contacts\\contacts.js","dependencies":[{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\src\\views\\cms\\contacts\\contacts.js","mtime":1649735864000},{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\babel.config.js","mtime":1649735864000},{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\github\\ziyuanwendang\\flash-vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _contacts = require(\"@/api/cms/contacts\");\n\nvar _default = {\n  name: 'contacts',\n  data: function data() {\n    return {\n      listQuery: {\n        page: 1,\n        limit: 20,\n        userName: undefined,\n        mobile: undefined,\n        startDate: undefined,\n        endDate: undefined\n      },\n      rangeDate: undefined,\n      total: 0,\n      list: null,\n      listLoading: true,\n      selRow: {},\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近一周',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      }\n    };\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        published: 'success',\n        draft: 'gray',\n        deleted: 'danger'\n      };\n      return statusMap[status];\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      this.fetchData();\n    },\n    fetchData: function fetchData() {\n      var _this = this;\n\n      this.listLoading = true;\n      var queryData = this.listQuery;\n\n      if (this.rangeDate) {\n        queryData['startDate'] = this.rangeDate[0];\n        queryData['endDate'] = this.rangeDate[1];\n      }\n\n      (0, _contacts.getList)(queryData).then(function (response) {\n        _this.list = response.data.records;\n        _this.listLoading = false;\n        _this.total = response.data.total;\n      });\n    },\n    search: function search() {\n      this.listQuery.page = 1;\n      this.fetchData();\n    },\n    reset: function reset() {\n      this.listQuery.userName = undefined;\n      this.listQuery.mobile = undefined;\n      this.listQuery.startDate = undefined;\n      this.listQuery.endDate = undefined;\n      this.rangeDate = undefined;\n      this.listQuery.page = 1;\n      this.fetchData();\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getList();\n    },\n    handleClose: function handleClose() {},\n    fetchNext: function fetchNext() {\n      this.listQuery.page = this.listQuery.page + 1;\n      this.fetchData();\n    },\n    fetchPrev: function fetchPrev() {\n      this.listQuery.page = this.listQuery.page - 1;\n      this.fetchData();\n    },\n    fetchPage: function fetchPage(page) {\n      this.listQuery.page = page;\n      this.fetchData();\n    },\n    changeSize: function changeSize(limit) {\n      this.listQuery.limit = limit;\n      this.fetchData();\n    },\n    handleCurrentChange: function handleCurrentChange(currentRow, oldCurrentRow) {\n      this.selRow = currentRow;\n    }\n  }\n};\nexports.default = _default;",null]}